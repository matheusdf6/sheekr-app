/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.14.0 (NJsonSchema v9.13.18.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAlunosClient {
    getAll(): Observable<RequestInfoOfAlunoListViewModel | null>;
    post(command: CriarAlunoCommand): Observable<RequestInfo | null>;
    get(id: number): Observable<RequestInfoOfAlunoDetailsModel | null>;
    put(id: number, command: AtualizarAlunoCommand): Observable<RequestInfo | null>;
    delete(id: number): Observable<RequestInfo | null>;
}

@Injectable()
export class AlunosClient implements IAlunosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<RequestInfoOfAlunoListViewModel | null> {
        let url_ = this.baseUrl + "/api/Alunos";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfoOfAlunoListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfoOfAlunoListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RequestInfoOfAlunoListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfoOfAlunoListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfoOfAlunoListViewModel | null>(<any>null);
    }

    post(command: CriarAlunoCommand): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Alunos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }

    get(id: number): Observable<RequestInfoOfAlunoDetailsModel | null> {
        let url_ = this.baseUrl + "/api/Alunos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfoOfAlunoDetailsModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfoOfAlunoDetailsModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RequestInfoOfAlunoDetailsModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfoOfAlunoDetailsModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfoOfAlunoDetailsModel | null>(<any>null);
    }

    put(id: number, command: AtualizarAlunoCommand): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Alunos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }

    delete(id: number): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Alunos/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }
}

export interface IDesignacoesClient {
    getAll(qtde: number): Observable<RequestInfoOfDesignacaoListViewModel | null>;
    post(command: DesignarCommand): Observable<RequestInfo | null>;
    gerarPdf(command: PdfGenerateCommand): Observable<File | null>;
    get(id: number): Observable<RequestInfoOfDesignacaoDetailModel | null>;
    put(id: number, command: AtualizarDesignacaoCommand): Observable<RequestInfo | null>;
    delete(id: number): Observable<RequestInfo | null>;
}

@Injectable()
export class DesignacoesClient implements IDesignacoesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(qtde: number): Observable<RequestInfoOfDesignacaoListViewModel | null> {
        let url_ = this.baseUrl + "/api/Designacoes?";
        if (qtde === undefined || qtde === null)
            throw new Error("The parameter 'qtde' must be defined and cannot be null.");
        else
            url_ += "qtde=" + encodeURIComponent("" + qtde) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfoOfDesignacaoListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfoOfDesignacaoListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RequestInfoOfDesignacaoListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfoOfDesignacaoListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfoOfDesignacaoListViewModel | null>(<any>null);
    }

    post(command: DesignarCommand): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Designacoes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }

    gerarPdf(command: PdfGenerateCommand): Observable<File | null> {
        let url_ = this.baseUrl + "/api/Designacoes/GerarPdf";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGerarPdf(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGerarPdf(<any>response_);
                } catch (e) {
                    return <Observable<File | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<File | null>><any>_observableThrow(response_);
        }));
    }

    protected processGerarPdf(response: HttpResponseBase): Observable<File | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? File.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<File | null>(<any>null);
    }

    get(id: number): Observable<RequestInfoOfDesignacaoDetailModel | null> {
        let url_ = this.baseUrl + "/api/Designacoes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfoOfDesignacaoDetailModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfoOfDesignacaoDetailModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RequestInfoOfDesignacaoDetailModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfoOfDesignacaoDetailModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfoOfDesignacaoDetailModel | null>(<any>null);
    }

    put(id: number, command: AtualizarDesignacaoCommand): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Designacoes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }

    delete(id: number): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Designacoes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }
}

export interface ILicoesClient {
    getAll(): Observable<RequestInfoOfLicaoListViewModel | null>;
    post(command: CriarLicaoCommand): Observable<RequestInfo | null>;
    get(id: number): Observable<RequestInfoOfLicao | null>;
    put(id: number, command: AtualizarLicaoCommand): Observable<RequestInfo | null>;
    delete(id: number): Observable<RequestInfo | null>;
}

@Injectable()
export class LicoesClient implements ILicoesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<RequestInfoOfLicaoListViewModel | null> {
        let url_ = this.baseUrl + "/api/Licoes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfoOfLicaoListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfoOfLicaoListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RequestInfoOfLicaoListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfoOfLicaoListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfoOfLicaoListViewModel | null>(<any>null);
    }

    post(command: CriarLicaoCommand): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Licoes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }

    get(id: number): Observable<RequestInfoOfLicao | null> {
        let url_ = this.baseUrl + "/api/Licoes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfoOfLicao | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfoOfLicao | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RequestInfoOfLicao | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfoOfLicao.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfoOfLicao | null>(<any>null);
    }

    put(id: number, command: AtualizarLicaoCommand): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Licoes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }

    delete(id: number): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Licoes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }
}

export interface IPublicadoresClient {
    getAll(): Observable<RequestInfoOfPublicadorListViewModel | null>;
    post(command: CriarPublicadorCommand): Observable<RequestInfo | null>;
    deleteMany(command: DeletarVariosPublicadorCommand): Observable<RequestInfo | null>;
    get(id: number): Observable<RequestInfoOfPublicadorDetailModel | null>;
    put(id: number, command: AtualizarPublicadorCommand): Observable<RequestInfo | null>;
    delete(id: number): Observable<RequestInfo | null>;
}

@Injectable()
export class PublicadoresClient implements IPublicadoresClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<RequestInfoOfPublicadorListViewModel | null> {
        let url_ = this.baseUrl + "/api/Publicadores";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfoOfPublicadorListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfoOfPublicadorListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RequestInfoOfPublicadorListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfoOfPublicadorListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfoOfPublicadorListViewModel | null>(<any>null);
    }

    post(command: CriarPublicadorCommand): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Publicadores";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }

    deleteMany(command: DeletarVariosPublicadorCommand): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Publicadores";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMany(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMany(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMany(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }

    get(id: number): Observable<RequestInfoOfPublicadorDetailModel | null> {
        let url_ = this.baseUrl + "/api/Publicadores/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfoOfPublicadorDetailModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfoOfPublicadorDetailModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RequestInfoOfPublicadorDetailModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfoOfPublicadorDetailModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfoOfPublicadorDetailModel | null>(<any>null);
    }

    put(id: number, command: AtualizarPublicadorCommand): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Publicadores/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? ProblemDetails.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }

    delete(id: number): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Publicadores/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }
}

export interface IUsuariosClient {
    getAll(): Observable<RequestInfoOfUsuarioListViewModel | null>;
    autenticar(command: AutenticarUsuarioCommand): Observable<RequestInfoOfUsuarioDto | null>;
    criar(command: CreateUserCommand): Observable<RequestInfo | null>;
}

@Injectable()
export class UsuariosClient implements IUsuariosClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<RequestInfoOfUsuarioListViewModel | null> {
        let url_ = this.baseUrl + "/api/Usuarios";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfoOfUsuarioListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfoOfUsuarioListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RequestInfoOfUsuarioListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfoOfUsuarioListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfoOfUsuarioListViewModel | null>(<any>null);
    }

    autenticar(command: AutenticarUsuarioCommand): Observable<RequestInfoOfUsuarioDto | null> {
        let url_ = this.baseUrl + "/api/Usuarios/Autenticar";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAutenticar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAutenticar(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfoOfUsuarioDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfoOfUsuarioDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processAutenticar(response: HttpResponseBase): Observable<RequestInfoOfUsuarioDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfoOfUsuarioDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfoOfUsuarioDto | null>(<any>null);
    }

    criar(command: CreateUserCommand): Observable<RequestInfo | null> {
        let url_ = this.baseUrl + "/api/Usuarios/Criar";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCriar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCriar(<any>response_);
                } catch (e) {
                    return <Observable<RequestInfo | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RequestInfo | null>><any>_observableThrow(response_);
        }));
    }

    protected processCriar(response: HttpResponseBase): Observable<RequestInfo | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RequestInfo.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestInfo | null>(<any>null);
    }
}

export class RequestInfo implements IRequestInfo {
    isSucceed?: boolean;
    errors?: { [key: string] : any; } | undefined;
    extras?: { [key: string] : any; } | undefined;

    constructor(data?: IRequestInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isSucceed = data["isSucceed"];
            if (data["errors"]) {
                this.errors = {} as any;
                for (let key in data["errors"]) {
                    if (data["errors"].hasOwnProperty(key))
                        this.errors![key] = data["errors"][key];
                }
            }
            if (data["extras"]) {
                this.extras = {} as any;
                for (let key in data["extras"]) {
                    if (data["extras"].hasOwnProperty(key))
                        this.extras![key] = data["extras"][key];
                }
            }
        }
    }

    static fromJS(data: any): RequestInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RequestInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSucceed"] = this.isSucceed;
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    data["errors"][key] = this.errors[key];
            }
        }
        if (this.extras) {
            data["extras"] = {};
            for (let key in this.extras) {
                if (this.extras.hasOwnProperty(key))
                    data["extras"][key] = this.extras[key];
            }
        }
        return data; 
    }
}

export interface IRequestInfo {
    isSucceed?: boolean;
    errors?: { [key: string] : any; } | undefined;
    extras?: { [key: string] : any; } | undefined;
}

export class RequestInfoOfAlunoListViewModel extends RequestInfo implements IRequestInfoOfAlunoListViewModel {
    response?: AlunoListViewModel | undefined;

    constructor(data?: IRequestInfoOfAlunoListViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.response = data["response"] ? AlunoListViewModel.fromJS(data["response"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestInfoOfAlunoListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RequestInfoOfAlunoListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRequestInfoOfAlunoListViewModel extends IRequestInfo {
    response?: AlunoListViewModel | undefined;
}

export class AlunoListViewModel implements IAlunoListViewModel {
    alunos?: AlunoDetailsModel[] | undefined;

    constructor(data?: IAlunoListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["alunos"] && data["alunos"].constructor === Array) {
                this.alunos = [] as any;
                for (let item of data["alunos"])
                    this.alunos!.push(AlunoDetailsModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AlunoListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AlunoListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.alunos && this.alunos.constructor === Array) {
            data["alunos"] = [];
            for (let item of this.alunos)
                data["alunos"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAlunoListViewModel {
    alunos?: AlunoDetailsModel[] | undefined;
}

export class AlunoDetailsModel implements IAlunoDetailsModel {
    alunoId?: number;
    nomePublicador?: string | undefined;
    fazLeitura?: boolean;
    fazDemonstracao?: boolean;
    fazDiscurso?: boolean;

    constructor(data?: IAlunoDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.alunoId = data["alunoId"];
            this.nomePublicador = data["nomePublicador"];
            this.fazLeitura = data["fazLeitura"];
            this.fazDemonstracao = data["fazDemonstracao"];
            this.fazDiscurso = data["fazDiscurso"];
        }
    }

    static fromJS(data: any): AlunoDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new AlunoDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alunoId"] = this.alunoId;
        data["nomePublicador"] = this.nomePublicador;
        data["fazLeitura"] = this.fazLeitura;
        data["fazDemonstracao"] = this.fazDemonstracao;
        data["fazDiscurso"] = this.fazDiscurso;
        return data; 
    }
}

export interface IAlunoDetailsModel {
    alunoId?: number;
    nomePublicador?: string | undefined;
    fazLeitura?: boolean;
    fazDemonstracao?: boolean;
    fazDiscurso?: boolean;
}

export class RequestInfoOfAlunoDetailsModel extends RequestInfo implements IRequestInfoOfAlunoDetailsModel {
    response?: AlunoDetailsModel | undefined;

    constructor(data?: IRequestInfoOfAlunoDetailsModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.response = data["response"] ? AlunoDetailsModel.fromJS(data["response"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestInfoOfAlunoDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new RequestInfoOfAlunoDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRequestInfoOfAlunoDetailsModel extends IRequestInfo {
    response?: AlunoDetailsModel | undefined;
}

export class CriarAlunoCommand implements ICriarAlunoCommand {
    publicadorId?: number;
    fazLeitura?: boolean;
    fazDemonstracao?: boolean;
    fazDiscurso?: boolean;

    constructor(data?: ICriarAlunoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.publicadorId = data["publicadorId"];
            this.fazLeitura = data["fazLeitura"];
            this.fazDemonstracao = data["fazDemonstracao"];
            this.fazDiscurso = data["fazDiscurso"];
        }
    }

    static fromJS(data: any): CriarAlunoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CriarAlunoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publicadorId"] = this.publicadorId;
        data["fazLeitura"] = this.fazLeitura;
        data["fazDemonstracao"] = this.fazDemonstracao;
        data["fazDiscurso"] = this.fazDiscurso;
        return data; 
    }
}

export interface ICriarAlunoCommand {
    publicadorId?: number;
    fazLeitura?: boolean;
    fazDemonstracao?: boolean;
    fazDiscurso?: boolean;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.title = data["title"];
            this.status = data["status"];
            this.detail = data["detail"];
            this.instance = data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class AtualizarAlunoCommand implements IAtualizarAlunoCommand {
    alunoId?: number;
    publicadorId?: number;
    fazLeitura?: boolean;
    fazDemonstracao?: boolean;
    fazDiscurso?: boolean;

    constructor(data?: IAtualizarAlunoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.alunoId = data["alunoId"];
            this.publicadorId = data["publicadorId"];
            this.fazLeitura = data["fazLeitura"];
            this.fazDemonstracao = data["fazDemonstracao"];
            this.fazDiscurso = data["fazDiscurso"];
        }
    }

    static fromJS(data: any): AtualizarAlunoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AtualizarAlunoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alunoId"] = this.alunoId;
        data["publicadorId"] = this.publicadorId;
        data["fazLeitura"] = this.fazLeitura;
        data["fazDemonstracao"] = this.fazDemonstracao;
        data["fazDiscurso"] = this.fazDiscurso;
        return data; 
    }
}

export interface IAtualizarAlunoCommand {
    alunoId?: number;
    publicadorId?: number;
    fazLeitura?: boolean;
    fazDemonstracao?: boolean;
    fazDiscurso?: boolean;
}

export class RequestInfoOfDesignacaoListViewModel extends RequestInfo implements IRequestInfoOfDesignacaoListViewModel {
    response?: DesignacaoListViewModel | undefined;

    constructor(data?: IRequestInfoOfDesignacaoListViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.response = data["response"] ? DesignacaoListViewModel.fromJS(data["response"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestInfoOfDesignacaoListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RequestInfoOfDesignacaoListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRequestInfoOfDesignacaoListViewModel extends IRequestInfo {
    response?: DesignacaoListViewModel | undefined;
}

export class DesignacaoListViewModel implements IDesignacaoListViewModel {
    designacoes?: DesignacaoDetailModel[] | undefined;

    constructor(data?: IDesignacaoListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["designacoes"] && data["designacoes"].constructor === Array) {
                this.designacoes = [] as any;
                for (let item of data["designacoes"])
                    this.designacoes!.push(DesignacaoDetailModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DesignacaoListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DesignacaoListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.designacoes && this.designacoes.constructor === Array) {
            data["designacoes"] = [];
            for (let item of this.designacoes)
                data["designacoes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDesignacaoListViewModel {
    designacoes?: DesignacaoDetailModel[] | undefined;
}

export class DesignacaoDetailModel implements IDesignacaoDetailModel {
    id?: number;
    nomePrincipal?: string | undefined;
    nomeAjudante?: string | undefined;
    licao?: number;
    data?: string | undefined;
    tipo?: string | undefined;
    local?: string | undefined;

    constructor(data?: IDesignacaoDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.nomePrincipal = data["nomePrincipal"];
            this.nomeAjudante = data["nomeAjudante"];
            this.licao = data["licao"];
            this.data = data["data"];
            this.tipo = data["tipo"];
            this.local = data["local"];
        }
    }

    static fromJS(data: any): DesignacaoDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new DesignacaoDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nomePrincipal"] = this.nomePrincipal;
        data["nomeAjudante"] = this.nomeAjudante;
        data["licao"] = this.licao;
        data["data"] = this.data;
        data["tipo"] = this.tipo;
        data["local"] = this.local;
        return data; 
    }
}

export interface IDesignacaoDetailModel {
    id?: number;
    nomePrincipal?: string | undefined;
    nomeAjudante?: string | undefined;
    licao?: number;
    data?: string | undefined;
    tipo?: string | undefined;
    local?: string | undefined;
}

export abstract class File implements IFile {

    constructor(data?: IFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
    }

    static fromJS(data: any): File {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'File' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IFile {
}

export class PdfGenerateCommand implements IPdfGenerateCommand {
    nomeArquivo?: string | undefined;
    designacoes?: number[] | undefined;

    constructor(data?: IPdfGenerateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.nomeArquivo = data["nomeArquivo"];
            if (data["designacoes"] && data["designacoes"].constructor === Array) {
                this.designacoes = [] as any;
                for (let item of data["designacoes"])
                    this.designacoes!.push(item);
            }
        }
    }

    static fromJS(data: any): PdfGenerateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PdfGenerateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nomeArquivo"] = this.nomeArquivo;
        if (this.designacoes && this.designacoes.constructor === Array) {
            data["designacoes"] = [];
            for (let item of this.designacoes)
                data["designacoes"].push(item);
        }
        return data; 
    }
}

export interface IPdfGenerateCommand {
    nomeArquivo?: string | undefined;
    designacoes?: number[] | undefined;
}

export class RequestInfoOfDesignacaoDetailModel extends RequestInfo implements IRequestInfoOfDesignacaoDetailModel {
    response?: DesignacaoDetailModel | undefined;

    constructor(data?: IRequestInfoOfDesignacaoDetailModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.response = data["response"] ? DesignacaoDetailModel.fromJS(data["response"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestInfoOfDesignacaoDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new RequestInfoOfDesignacaoDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRequestInfoOfDesignacaoDetailModel extends IRequestInfo {
    response?: DesignacaoDetailModel | undefined;
}

export class DesignarCommand implements IDesignarCommand {
    licaoId?: number;
    alunoPrincipalId?: number;
    alunoAjudanteId?: number | undefined;
    data?: Date;
    tipo?: TipoDesignacaoEscola;
    local?: LocalDesignacao;

    constructor(data?: IDesignarCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.licaoId = data["licaoId"];
            this.alunoPrincipalId = data["alunoPrincipalId"];
            this.alunoAjudanteId = data["alunoAjudanteId"];
            this.data = data["data"] ? new Date(data["data"].toString()) : <any>undefined;
            this.tipo = data["tipo"];
            this.local = data["local"];
        }
    }

    static fromJS(data: any): DesignarCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DesignarCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["licaoId"] = this.licaoId;
        data["alunoPrincipalId"] = this.alunoPrincipalId;
        data["alunoAjudanteId"] = this.alunoAjudanteId;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["tipo"] = this.tipo;
        data["local"] = this.local;
        return data; 
    }
}

export interface IDesignarCommand {
    licaoId?: number;
    alunoPrincipalId?: number;
    alunoAjudanteId?: number | undefined;
    data?: Date;
    tipo?: TipoDesignacaoEscola;
    local?: LocalDesignacao;
}

export enum TipoDesignacaoEscola {
    Leitura = 1, 
    PrimeiraConversa = 2, 
    PrimeiraRevisita = 3, 
    SegundaRevisita = 4, 
    EstudoBiblico = 5, 
    Discurso = 6, 
}

export enum LocalDesignacao {
    SalaoPrincipal = 1, 
    SalaB = 2, 
    SalaC = 3, 
}

export class AtualizarDesignacaoCommand implements IAtualizarDesignacaoCommand {
    designacaoId?: number;
    licaoId?: number;
    alunoPrincipalId?: number;
    alunoAjudanteId?: number | undefined;
    data?: Date;
    tipo?: TipoDesignacaoEscola;
    local?: LocalDesignacao;

    constructor(data?: IAtualizarDesignacaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.designacaoId = data["designacaoId"];
            this.licaoId = data["licaoId"];
            this.alunoPrincipalId = data["alunoPrincipalId"];
            this.alunoAjudanteId = data["alunoAjudanteId"];
            this.data = data["data"] ? new Date(data["data"].toString()) : <any>undefined;
            this.tipo = data["tipo"];
            this.local = data["local"];
        }
    }

    static fromJS(data: any): AtualizarDesignacaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AtualizarDesignacaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["designacaoId"] = this.designacaoId;
        data["licaoId"] = this.licaoId;
        data["alunoPrincipalId"] = this.alunoPrincipalId;
        data["alunoAjudanteId"] = this.alunoAjudanteId;
        data["data"] = this.data ? this.data.toISOString() : <any>undefined;
        data["tipo"] = this.tipo;
        data["local"] = this.local;
        return data; 
    }
}

export interface IAtualizarDesignacaoCommand {
    designacaoId?: number;
    licaoId?: number;
    alunoPrincipalId?: number;
    alunoAjudanteId?: number | undefined;
    data?: Date;
    tipo?: TipoDesignacaoEscola;
    local?: LocalDesignacao;
}

export class RequestInfoOfLicaoListViewModel extends RequestInfo implements IRequestInfoOfLicaoListViewModel {
    response?: LicaoListViewModel | undefined;

    constructor(data?: IRequestInfoOfLicaoListViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.response = data["response"] ? LicaoListViewModel.fromJS(data["response"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestInfoOfLicaoListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RequestInfoOfLicaoListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRequestInfoOfLicaoListViewModel extends IRequestInfo {
    response?: LicaoListViewModel | undefined;
}

export class LicaoListViewModel implements ILicaoListViewModel {
    licoes?: Licao[] | undefined;

    constructor(data?: ILicaoListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["licoes"] && data["licoes"].constructor === Array) {
                this.licoes = [] as any;
                for (let item of data["licoes"])
                    this.licoes!.push(Licao.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LicaoListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new LicaoListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.licoes && this.licoes.constructor === Array) {
            data["licoes"] = [];
            for (let item of this.licoes)
                data["licoes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILicaoListViewModel {
    licoes?: Licao[] | undefined;
}

export class Licao implements ILicao {
    licaoId?: number;
    tituloLicao?: string | undefined;

    constructor(data?: ILicao) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.licaoId = data["licaoId"];
            this.tituloLicao = data["tituloLicao"];
        }
    }

    static fromJS(data: any): Licao {
        data = typeof data === 'object' ? data : {};
        let result = new Licao();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["licaoId"] = this.licaoId;
        data["tituloLicao"] = this.tituloLicao;
        return data; 
    }
}

export interface ILicao {
    licaoId?: number;
    tituloLicao?: string | undefined;
}

export class RequestInfoOfLicao extends RequestInfo implements IRequestInfoOfLicao {
    response?: Licao | undefined;

    constructor(data?: IRequestInfoOfLicao) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.response = data["response"] ? Licao.fromJS(data["response"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestInfoOfLicao {
        data = typeof data === 'object' ? data : {};
        let result = new RequestInfoOfLicao();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRequestInfoOfLicao extends IRequestInfo {
    response?: Licao | undefined;
}

export class CriarLicaoCommand implements ICriarLicaoCommand {
    id?: number;
    titulo?: string | undefined;

    constructor(data?: ICriarLicaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.titulo = data["titulo"];
        }
    }

    static fromJS(data: any): CriarLicaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CriarLicaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titulo"] = this.titulo;
        return data; 
    }
}

export interface ICriarLicaoCommand {
    id?: number;
    titulo?: string | undefined;
}

export class AtualizarLicaoCommand implements IAtualizarLicaoCommand {
    id?: number;
    titulo?: string | undefined;

    constructor(data?: IAtualizarLicaoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.titulo = data["titulo"];
        }
    }

    static fromJS(data: any): AtualizarLicaoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AtualizarLicaoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["titulo"] = this.titulo;
        return data; 
    }
}

export interface IAtualizarLicaoCommand {
    id?: number;
    titulo?: string | undefined;
}

export class RequestInfoOfPublicadorListViewModel extends RequestInfo implements IRequestInfoOfPublicadorListViewModel {
    response?: PublicadorListViewModel | undefined;

    constructor(data?: IRequestInfoOfPublicadorListViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.response = data["response"] ? PublicadorListViewModel.fromJS(data["response"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestInfoOfPublicadorListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RequestInfoOfPublicadorListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRequestInfoOfPublicadorListViewModel extends IRequestInfo {
    response?: PublicadorListViewModel | undefined;
}

export class PublicadorListViewModel implements IPublicadorListViewModel {
    publicadores?: PublicadorDetailModel[] | undefined;

    constructor(data?: IPublicadorListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["publicadores"] && data["publicadores"].constructor === Array) {
                this.publicadores = [] as any;
                for (let item of data["publicadores"])
                    this.publicadores!.push(PublicadorDetailModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PublicadorListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PublicadorListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.publicadores && this.publicadores.constructor === Array) {
            data["publicadores"] = [];
            for (let item of this.publicadores)
                data["publicadores"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPublicadorListViewModel {
    publicadores?: PublicadorDetailModel[] | undefined;
}

export class PublicadorDetailModel implements IPublicadorDetailModel {
    publicadorId?: number;
    sexo?: string | undefined;
    privilegio?: string | undefined;
    email?: string | undefined;
    telefone?: string | undefined;
    primeiroNome?: string | undefined;
    ultimoNome?: string | undefined;
    nomeCompleto?: string | undefined;
    isAluno?: boolean;
    isOrador?: boolean;
    isDirigente?: boolean;

    constructor(data?: IPublicadorDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.publicadorId = data["publicadorId"];
            this.sexo = data["sexo"];
            this.privilegio = data["privilegio"];
            this.email = data["email"];
            this.telefone = data["telefone"];
            this.primeiroNome = data["primeiroNome"];
            this.ultimoNome = data["ultimoNome"];
            this.nomeCompleto = data["nomeCompleto"];
            this.isAluno = data["isAluno"];
            this.isOrador = data["isOrador"];
            this.isDirigente = data["isDirigente"];
        }
    }

    static fromJS(data: any): PublicadorDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new PublicadorDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publicadorId"] = this.publicadorId;
        data["sexo"] = this.sexo;
        data["privilegio"] = this.privilegio;
        data["email"] = this.email;
        data["telefone"] = this.telefone;
        data["primeiroNome"] = this.primeiroNome;
        data["ultimoNome"] = this.ultimoNome;
        data["nomeCompleto"] = this.nomeCompleto;
        data["isAluno"] = this.isAluno;
        data["isOrador"] = this.isOrador;
        data["isDirigente"] = this.isDirigente;
        return data; 
    }
}

export interface IPublicadorDetailModel {
    publicadorId?: number;
    sexo?: string | undefined;
    privilegio?: string | undefined;
    email?: string | undefined;
    telefone?: string | undefined;
    primeiroNome?: string | undefined;
    ultimoNome?: string | undefined;
    nomeCompleto?: string | undefined;
    isAluno?: boolean;
    isOrador?: boolean;
    isDirigente?: boolean;
}

export class RequestInfoOfPublicadorDetailModel extends RequestInfo implements IRequestInfoOfPublicadorDetailModel {
    response?: PublicadorDetailModel | undefined;

    constructor(data?: IRequestInfoOfPublicadorDetailModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.response = data["response"] ? PublicadorDetailModel.fromJS(data["response"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestInfoOfPublicadorDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new RequestInfoOfPublicadorDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRequestInfoOfPublicadorDetailModel extends IRequestInfo {
    response?: PublicadorDetailModel | undefined;
}

export class CriarPublicadorCommand implements ICriarPublicadorCommand {
    primeiroNome?: string | undefined;
    ultimoNome?: string | undefined;
    email?: string | undefined;
    telefone?: string | undefined;
    sexo?: Genero;
    privilegio?: Privilegio;

    constructor(data?: ICriarPublicadorCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.primeiroNome = data["primeiroNome"];
            this.ultimoNome = data["ultimoNome"];
            this.email = data["email"];
            this.telefone = data["telefone"];
            this.sexo = data["sexo"];
            this.privilegio = data["privilegio"];
        }
    }

    static fromJS(data: any): CriarPublicadorCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CriarPublicadorCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["primeiroNome"] = this.primeiroNome;
        data["ultimoNome"] = this.ultimoNome;
        data["email"] = this.email;
        data["telefone"] = this.telefone;
        data["sexo"] = this.sexo;
        data["privilegio"] = this.privilegio;
        return data; 
    }
}

export interface ICriarPublicadorCommand {
    primeiroNome?: string | undefined;
    ultimoNome?: string | undefined;
    email?: string | undefined;
    telefone?: string | undefined;
    sexo?: Genero;
    privilegio?: Privilegio;
}

export enum Genero {
    Masculino = 1, 
    Feminino = 2, 
}

export enum Privilegio {
    Nenhum = 1, 
    ServoMinisterial = 2, 
    Anciao = 3, 
}

export class AtualizarPublicadorCommand implements IAtualizarPublicadorCommand {
    publicadorId?: number;
    primeiroNome?: string | undefined;
    ultimoNome?: string | undefined;
    email?: string | undefined;
    telefone?: string | undefined;
    sexo?: Genero;
    privilegio?: Privilegio;

    constructor(data?: IAtualizarPublicadorCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.publicadorId = data["publicadorId"];
            this.primeiroNome = data["primeiroNome"];
            this.ultimoNome = data["ultimoNome"];
            this.email = data["email"];
            this.telefone = data["telefone"];
            this.sexo = data["sexo"];
            this.privilegio = data["privilegio"];
        }
    }

    static fromJS(data: any): AtualizarPublicadorCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AtualizarPublicadorCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publicadorId"] = this.publicadorId;
        data["primeiroNome"] = this.primeiroNome;
        data["ultimoNome"] = this.ultimoNome;
        data["email"] = this.email;
        data["telefone"] = this.telefone;
        data["sexo"] = this.sexo;
        data["privilegio"] = this.privilegio;
        return data; 
    }
}

export interface IAtualizarPublicadorCommand {
    publicadorId?: number;
    primeiroNome?: string | undefined;
    ultimoNome?: string | undefined;
    email?: string | undefined;
    telefone?: string | undefined;
    sexo?: Genero;
    privilegio?: Privilegio;
}

export class DeletarVariosPublicadorCommand implements IDeletarVariosPublicadorCommand {
    publicadorIds?: number[] | undefined;

    constructor(data?: IDeletarVariosPublicadorCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["publicadorIds"] && data["publicadorIds"].constructor === Array) {
                this.publicadorIds = [] as any;
                for (let item of data["publicadorIds"])
                    this.publicadorIds!.push(item);
            }
        }
    }

    static fromJS(data: any): DeletarVariosPublicadorCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeletarVariosPublicadorCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.publicadorIds && this.publicadorIds.constructor === Array) {
            data["publicadorIds"] = [];
            for (let item of this.publicadorIds)
                data["publicadorIds"].push(item);
        }
        return data; 
    }
}

export interface IDeletarVariosPublicadorCommand {
    publicadorIds?: number[] | undefined;
}

export class RequestInfoOfUsuarioListViewModel extends RequestInfo implements IRequestInfoOfUsuarioListViewModel {
    response?: UsuarioListViewModel | undefined;

    constructor(data?: IRequestInfoOfUsuarioListViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.response = data["response"] ? UsuarioListViewModel.fromJS(data["response"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestInfoOfUsuarioListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RequestInfoOfUsuarioListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRequestInfoOfUsuarioListViewModel extends IRequestInfo {
    response?: UsuarioListViewModel | undefined;
}

export class UsuarioListViewModel implements IUsuarioListViewModel {
    usuarios?: UsuarioDetailModel[] | undefined;

    constructor(data?: IUsuarioListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["usuarios"] && data["usuarios"].constructor === Array) {
                this.usuarios = [] as any;
                for (let item of data["usuarios"])
                    this.usuarios!.push(UsuarioDetailModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UsuarioListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.usuarios && this.usuarios.constructor === Array) {
            data["usuarios"] = [];
            for (let item of this.usuarios)
                data["usuarios"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUsuarioListViewModel {
    usuarios?: UsuarioDetailModel[] | undefined;
}

export class UsuarioDetailModel implements IUsuarioDetailModel {
    id?: number;
    primeiroNome?: string | undefined;
    ultimoNome?: string | undefined;
    userName?: string | undefined;

    constructor(data?: IUsuarioDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.primeiroNome = data["primeiroNome"];
            this.ultimoNome = data["ultimoNome"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): UsuarioDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["primeiroNome"] = this.primeiroNome;
        data["ultimoNome"] = this.ultimoNome;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface IUsuarioDetailModel {
    id?: number;
    primeiroNome?: string | undefined;
    ultimoNome?: string | undefined;
    userName?: string | undefined;
}

export class RequestInfoOfUsuarioDto extends RequestInfo implements IRequestInfoOfUsuarioDto {
    response?: UsuarioDto | undefined;

    constructor(data?: IRequestInfoOfUsuarioDto) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.response = data["response"] ? UsuarioDto.fromJS(data["response"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestInfoOfUsuarioDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestInfoOfUsuarioDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface IRequestInfoOfUsuarioDto extends IRequestInfo {
    response?: UsuarioDto | undefined;
}

export class UsuarioDto implements IUsuarioDto {
    id?: number;
    userName?: string | undefined;
    password?: string | undefined;
    token?: string | undefined;

    constructor(data?: IUsuarioDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.userName = data["userName"];
            this.password = data["password"];
            this.token = data["token"];
        }
    }

    static fromJS(data: any): UsuarioDto {
        data = typeof data === 'object' ? data : {};
        let result = new UsuarioDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["token"] = this.token;
        return data; 
    }
}

export interface IUsuarioDto {
    id?: number;
    userName?: string | undefined;
    password?: string | undefined;
    token?: string | undefined;
}

export class AutenticarUsuarioCommand implements IAutenticarUsuarioCommand {
    userName?: string | undefined;
    password?: string | undefined;

    constructor(data?: IAutenticarUsuarioCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): AutenticarUsuarioCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AutenticarUsuarioCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }
}

export interface IAutenticarUsuarioCommand {
    userName?: string | undefined;
    password?: string | undefined;
}

export class CreateUserCommand implements ICreateUserCommand {
    primeiroNome?: string | undefined;
    ultimoNome?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    role?: Role | undefined;

    constructor(data?: ICreateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.primeiroNome = data["primeiroNome"];
            this.ultimoNome = data["ultimoNome"];
            this.userName = data["userName"];
            this.password = data["password"];
            this.role = data["role"];
        }
    }

    static fromJS(data: any): CreateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["primeiroNome"] = this.primeiroNome;
        data["ultimoNome"] = this.ultimoNome;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["role"] = this.role;
        return data; 
    }
}

export interface ICreateUserCommand {
    primeiroNome?: string | undefined;
    ultimoNome?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    role?: Role | undefined;
}

export enum Role {
    NaoAutorizado = 1, 
    Administrador = 2, 
    Escola = 3, 
    Territorio = 4, 
    Discurso = 5, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}